import EnvironmentViewModel from "../viewmodel/EnvironmentViewModel";

import ResultData from '../model/ResultData';
import HttpUtil from '../common/utils/HttpUtil';
import { promptAction } from '@kit.ArkUI';

@Component
export struct AIComponent {
  @Prop
  item: EnvironmentViewModel;
  @State
  resultString: string = 'üå± Ê¨¢Ëøé‰ΩøÁî®ÁªøÊ§ç‰ºô‰º¥AIÂä©Êâã\n\nÁÇπÂáªÂè≥‰∏äÊñπÊåâÈíÆÂºÄÂßãÊô∫ËÉΩËØÑ‰º∞ÊÇ®ÁöÑÊ§çÁâ©ÁîüÈïøÁéØÂ¢É'
  @State
  isBusy: boolean = false;
  @State
  buttonScale: number = 1;
  @State
  cardOpacity: number = 1;

  aiRequest() {
    //Âà§Êñ≠ÊòØÂê¶Âú®ËØ∑Ê±Ç‰∏≠
    if (this.isBusy) {
      promptAction.showToast({
        message: 'AI Â§ßÊ®°ÂûãËØÑ‰º∞‰∏≠„ÄÇ„ÄÇ„ÄÇ',
        duration: 2000
      });
      return;
    }

    //Âà§Êñ≠ÂΩìÂâçÊï∞ÊçÆÊòØÂê¶ÊúâÊïà
    if (!this.item) {
      promptAction.showToast({
        message: 'ËØÑ‰º∞Êï∞ÊçÆÊó†Êïà',
        duration: 2000
      });
      return;
    }

    //ËÆæÁΩÆËØ∑Ê±ÇÂèÇÊï∞
    let parm =
      `‰Ω†ÊòØ‰∏ÄÂêç‰∏ì‰∏öÁöÑÊ§çÁâ©ÂÖªÊä§È°æÈóÆÔºåÂêçÁß∞‰∏∫"ÁªøÊ§ç‰ºô‰º¥"„ÄÇÂü∫‰∫éÂÆûÊó∂Ê£ÄÊµãÁöÑ**Ê∏©Â∫¶„ÄÅÊπøÂ∫¶„ÄÅÊ§çÁâ©ÁßçÁ±ªÂíåÂèØÁáÉÊ∞î‰Ωì**ÊåáÊ†áÔºå‰∏ªË¶ÅÂÖ≥Ê≥®Ê§çÁâ©ÂÅ•Â∫∑ÈúÄÊ±ÇÔºåÂú®Á°Æ‰øùÂÆâÂÖ®ÁöÑÂâçÊèê‰∏ãÊèê‰æõ‰∏ì‰∏öÁöÑÂÖªÊä§Âª∫ËÆÆ„ÄÇÂÜÖÂÆπ‰∏∫120Â≠óÂ∑¶Âè≥ÔºåÂΩìÂâçÁéØÂ¢É‰∏∫ÔºåÊ∏©Â∫¶:${this.item.temp}Â∫¶ÔºåÊπøÂ∫¶:${this.item.hum}%ÔºåÂèØÁáÉÊ∞î‰Ωì:${this.item.gas}ppm`

    //ÊîπÂèòÁä∂ÊÄÅ
    this.isBusy = true;
    
    // Ê∑ªÂä†Ê∑°Âá∫Âä®Áîª
    animateTo({ duration: 300 }, () => {
      this.cardOpacity = 0.7;
    });

    //AIÂàÜÊûêËØ∑Ê±Ç
    HttpUtil.post<ResultData, string>('ai/analysis', parm)
      .then((data: ResultData) => {
        //ÊàêÂäüÂêéÂ§ÑÁêÜÊï∞ÊçÆ
        if (data?.success) {
          this.resultString = `ü§ñ ÁªøÊ§ç‰ºô‰º¥AIÂàÜÊûêÁªìÊûúÔºö\n\n${data.data}`;
        }
      })
      .finally(() => {
        //ÊúÄÂêéÊõ¥Êñ∞Áä∂ÊÄÅ
        this.isBusy = false;
        // ÊÅ¢Â§çÈÄèÊòéÂ∫¶
        animateTo({ duration: 300 }, () => {
          this.cardOpacity = 1;
        });
      })
  }

  private handleButtonPress() {
    animateTo({ duration: 150 }, () => {
      this.buttonScale = 0.95;
    });
  }

  private handleButtonRelease() {
    animateTo({ duration: 150 }, () => {
      this.buttonScale = 1;
    });
  }

  build() {
    Column() {
      // Â§¥ÈÉ®Âå∫Âüü
      Row() {
        // AIÂõæÊ†áÂÆπÂô®
        Row() {
          Image($r('app.media.ai_green_128'))
            .width(45)
            .height(45)
            .borderRadius(22.5)
            .shadow({
              radius: 8,
              color: '#4CAF5040',
              offsetX: 0,
              offsetY: 2
            })
        }
        .padding(8)
        .backgroundColor('#E8F5E8')
        .borderRadius(25)

        Blank()

        // Áä∂ÊÄÅÊåáÁ§∫Âô®
        if (this.isBusy) {
          Row({ space: 12 }) {
            LoadingProgress()
              .width(32)
              .height(32)
              .color('#4CAF50')
            
            Column() {
              Text('AIÂàÜÊûê‰∏≠')
                .fontSize(14)
                .fontWeight(600)
                .fontColor('#4CAF50')
              Text('ËØ∑Á®çÂÄô...')
                .fontSize(12)
                .fontColor('#81C784')
                .margin({ top: 2 })
            }
            .alignItems(HorizontalAlign.Start)
          }
          .padding({ left: 16, right: 16, top: 8, bottom: 8 })
          .backgroundColor('#E8F5E8')
          .borderRadius(20)
        }

        Blank()

        // AIËØÑ‰º∞ÊåâÈíÆ
        Button('üöÄ AIËØÑ‰º∞')
          .fontSize(16)
          .fontWeight(600)
          .height(44)
          .padding({ left: 20, right: 20 })
          .backgroundColor(this.isBusy ? '#CCCCCC' : '#4CAF50')
          .borderRadius(22)
          .enabled(!this.isBusy)
          .scale({ x: this.buttonScale, y: this.buttonScale })
          .shadow({
            radius: this.isBusy ? 4 : 8,
            color: this.isBusy ? '#00000020' : '#4CAF5040',
            offsetX: 0,
            offsetY: this.isBusy ? 2 : 4
          })
          .onTouch((event) => {
            if (event.type === TouchType.Down) {
              this.handleButtonPress();
            } else if (event.type === TouchType.Up) {
              this.handleButtonRelease();
            }
          })
          .onClick(() => {
            this.aiRequest();
          })
      }
      .width('100%')
      .padding({ left: 4, right: 4 })
      .justifyContent(FlexAlign.SpaceBetween)

      // ÁªìÊûúÊòæÁ§∫Âå∫Âüü
      Column() {
        Scroll() {
          Text(this.resultString)
            .lineHeight(28)
            .fontSize(15)
            .fontColor('#2E7D32')
            .width('100%')
            .padding(16)
        }
        .height('100%')
        .scrollBar(BarState.Auto)
        .scrollBarColor('#4CAF50')
        .scrollBarWidth(3)
      }
      .width('100%')
      .height('82%')
      .margin({ top: 16 })
      .backgroundColor('#FAFAFA')
      .borderColor('#E0E0E0')
      .borderWidth(1)
      .borderRadius(16)
      .opacity(this.cardOpacity)
      .shadow({
        radius: 12,
        color: '#00000015',
        offsetX: 0,
        offsetY: 4
      })

      Blank()
    }
    .alignItems(HorizontalAlign.Center)
    .padding(16)
    .width('100%')
    .height('100%')
    .borderRadius(20)
    .linearGradient({
      angle: 135,
      colors: [['#FFFFFF', 0.0], ['#F1F8E9', 1.0]]
    })
    .shadow({
      radius: 16,
      color: '#00000010',
      offsetX: 0,
      offsetY: 6
    })
    .margin({ left: 12, right: 12, top: 8, bottom: 8 })
  }
}